apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'
apply from: 'config.gradle'

// 项目构建时的脚本
buildscript {

    // 项目构建所需依赖包的仓库
    repositories {
        mavenLocal()
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
    }

    // 设置引用在构建项目时的插件
    dependencies {
        classpath "gradle.plugin.com.github.johnrengelman:shadow:7.1.2"
    }
}

// Jar包基础名称
def jarBaseName = ext.project.projectName
// Jar包版本号
def jarVersion = ext.project.projectVersion
// Jar包发布时间
def releaseDateTime = getReleaseDateTime()
// Jar包全名
def jarFullName = jarBaseName + '-' + jarVersion + '-' + releaseDateTime
// 主类
def mainClassFullName = ext.project.mainClassFullName

// 设置编译兼容性版本
sourceCompatibility = 1.8
targetCompatibility = 1.8

// 设置主类
mainClassName = mainClassFullName

// 设置编译时的编码格式
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// 设置编译时的编码
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// 设置项目的资源目录位置
sourceSets {
    main.resources.srcDirs = ["src/main/java", "src/main/resources"]
}

/**
 * 返回当前日期时间字符串
 *
 * @return 当前日期时间字符串
 */
def getReleaseDateTime() {
    return new Date().format("yyyyMMddHHmm", TimeZone.getTimeZone("GMT+08:00"))
}

// 生成Jar包的基本属性信息
jar {
    // 生成Jar包的属性清单
    manifest {
        attributes 'Implementation-Title': jarBaseName,
                'Implementation-Version': jarVersion,
                'Main-Class': mainClassFullName
    }

    // 编译后的字节码文件以及各种资源文件打包
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

// 使用影子工具生成Jar包的基本信息
shadowJar {
    // Jar包全名
    archiveBaseName = jarFullName

    // 将依赖包中重名的spring相关文件（spring.schema等）做内容合并，避免内容被覆盖导致运行异常
    mergeServiceFiles {
        path = 'META-INF/spring.*'
    }
}

// Jar包发布任务
task releaseJar(type: Copy) {
    // 先删除Jar包发布目录
    delete rootDir.toString() + '/distribution'

    // 将自带shadowJar任务生成的Jar包拷贝到Jar包发布目录下
    from libsDirectory
    into rootDir.toString() + '/distribution'

    // 同时创建适用于Microsoft Windows和macOS、Linux操作系统下，可直接双击运行的脚本
    mkdir rootDir.toString() + '/distribution'
    file(rootDir.toString() + '/distribution/run.sh') withWriter { writer ->
        writer.write('#!/bin/sh\njava -jar ' + jarFullName + '-all.jar')
    }
    file(rootDir.toString() + '/distribution/run.bat') withWriter { writer ->
        writer.write('java -jar ' + jarFullName + '-all.jar')
    }

    // 设置任务间依赖关系
    dependsOn(['clean', 'shadowJar'])
    // 设置任务间执行顺序
    shadowJar.mustRunAfter(clean)
}

// 项目开发及运行所需依赖包的仓库
repositories {
    mavenLocal()
    maven { url 'https://maven.aliyun.com/repository/central' }
    maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
}

// 项目依赖包
dependencies {
    implementation("org.springframework:spring-context:$rootProject.ext.dependencies.springContextVersion")
    implementation("org.springframework:spring-test:$rootProject.ext.dependencies.springTestVersion")

    implementation("net.jthink:jaudiotagger:$rootProject.ext.dependencies.jAudioTaggerVersion")
    implementation("net.bramp.ffmpeg:ffmpeg:$rootProject.ext.dependencies.ffmpegVersion")
    implementation("com.twelvemonkeys.imageio:imageio-jpeg:$rootProject.ext.dependencies.imageioJpegVersion")

    implementation("com.squareup.okhttp3:okhttp:$rootProject.ext.dependencies.okHttpVersion")
    implementation("com.google.code.gson:gson:$rootProject.ext.dependencies.gsonVersion")
    implementation("com.google.guava:guava:$rootProject.ext.dependencies.guavaVersion")
    implementation("org.apache.commons:commons-lang3:$rootProject.ext.dependencies.commonsLang3Version")
    implementation("org.apache.commons:commons-collections4:$rootProject.ext.dependencies.commonsCollections4Version")
    implementation("net.sf.dozer:dozer:$rootProject.ext.dependencies.dozerVersion")
    implementation("org.yaml:snakeyaml:$rootProject.ext.dependencies.snakeyamlVersion")
    implementation("org.slf4j:slf4j-api:$rootProject.ext.dependencies.slf4jApiVersion")
    implementation("ch.qos.logback:logback-core:$rootProject.ext.dependencies.logbackCoreVersion")
    implementation("ch.qos.logback:logback-classic:$rootProject.ext.dependencies.logbackClassicVersion")

    testImplementation("junit:junit:$rootProject.ext.dependencies.junitVersion")
    testImplementation("org.hamcrest:hamcrest-core:$rootProject.ext.dependencies.hamcrestCoreVersion")
}